{
  "active": false,
  "connections": {},
  "createdAt": "2024-12-11T01:10:17.124Z",
  "id": "Z7iyDTprF7yAHXGf",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Easy Image Captioning with Gemini 1.5 Pro",
  "nodes": [
    {
      "parameters": {},
      "id": "ddec6ac5-d034-419b-8573-2b7af1f473d5",
      "name": "When clicking ‘Test workflow’",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        1060,
        680
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "id": "ebbe1355-ac79-4946-a4b0-7a7cbce5b3fa",
      "name": "Google Gemini Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "position": [
        1860,
        1100
      ],
      "typeVersion": 1,
      "credentials": {
        "googlePalmApi": {
          "id": "eUkvc1cv7n7zwa7I",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"caption_title\": \"\",\n\t\"caption_text\": \"\"\n}"
      },
      "id": "8685decf-25b9-4ed1-b871-e7eae0b0acf7",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "position": [
        2060,
        1100
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "operation": "information"
      },
      "id": "0c0560c1-e4cd-4d78-87d3-8d174501cf8f",
      "name": "Get Info",
      "type": "n8n-nodes-base.editImage",
      "position": [
        1680,
        780
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "operation": "resize",
        "width": 512,
        "height": 512,
        "options": {}
      },
      "id": "de7c8474-6ccf-4471-a113-bdaf458a5e28",
      "name": "Resize For AI",
      "type": "n8n-nodes-base.editImage",
      "position": [
        1680,
        940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const { size, output } = $input.item.json;\n\nconst lineHeight = 35;\nconst fontSize = Math.round(size.height / lineHeight);\nconst maxLineLength = Math.round(size.width/fontSize) * 2;\nconst text = `\"${output.caption_title}\". ${output.caption_text}`;\nconst numLinesOccupied = Math.round(text.length / maxLineLength);\n\nconst verticalPadding = size.height * 0.02;\nconst horizontalPadding = size.width * 0.02;\nconst rectPosX = 0;\nconst rectPosY = size.height - (verticalPadding * 2.5) - (numLinesOccupied * fontSize);\nconst textPosX = horizontalPadding;\nconst textPosY = size.height - (numLinesOccupied * fontSize) - (verticalPadding/2);\n\nreturn {\n  caption: {\n    fontSize,\n    maxLineLength,\n    numLinesOccupied,\n    rectPosX,\n    rectPosY,\n    textPosX,\n    textPosY,\n    verticalPadding,\n    horizontalPadding,\n  }\n}\n"
      },
      "id": "1eb0b173-030b-4b29-8b11-91feb34828d0",
      "name": "Calculate Positioning",
      "type": "n8n-nodes-base.code",
      "position": [
        2600,
        1100
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "multiStep",
        "operations": {
          "operations": [
            {
              "operation": "draw",
              "color": "=#0000008c",
              "startPositionX": "={{ $json.caption.rectPosX }}",
              "startPositionY": "={{ $json.caption.rectPosY }}",
              "endPositionX": "={{ $json.size.width }}",
              "endPositionY": "={{ $json.size.height }}"
            },
            {
              "operation": "text",
              "text": "=\"{{ $json.output.caption_title }}\". {{ $json.output.caption_text }}",
              "fontSize": "={{ $json.caption.fontSize }}",
              "fontColor": "#FFFFFF",
              "positionX": "={{ $json.caption.textPosX }}",
              "positionY": "={{ $json.caption.textPosY }}",
              "lineLength": "={{ $json.caption.maxLineLength }}",
              "font": "/usr/share/fonts/truetype/msttcorefonts/Arial.ttf"
            }
          ]
        },
        "options": {}
      },
      "id": "d99e4483-c997-4b47-a965-25878cb25f02",
      "name": "Apply Caption to Image",
      "type": "n8n-nodes-base.editImage",
      "position": [
        2960,
        940
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Try it out!\n\n### This workflow takes an image and generates a caption for it using AI. The OpenAI node has been able to do this for a while but this workflow demonstrates how to achieve the same with other multimodal vision models such as Google's Gemini.\n\nAdditional, we'll use the Edit Image node to overlay the generated caption onto the image. This can be useful for publications or can be repurposed for copyrights and/or watermarks.\n\n### Need Help?\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\n",
        "height": 431.76353488372104,
        "width": 423.75
      },
      "id": "7a4eb0dd-9887-4430-a627-44b66734f829",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        460,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "add5143d-6277-430e-8a74-b801d77a60be",
      "name": "Merge Image & Caption",
      "type": "n8n-nodes-base.merge",
      "position": [
        2200,
        780
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "91f12f42-3f16-4998-a127-ab55baab6d9f",
      "name": "Merge Caption & Positions",
      "type": "n8n-nodes-base.merge",
      "position": [
        2780,
        940
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "url": "https://images.pexels.com/photos/1638051/pexels-photo-1638051.jpeg",
        "options": {}
      },
      "id": "9cc49c92-a7ce-44e7-8ab3-c50ffea57354",
      "name": "Get Image",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1260,
        680
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## 1. Import an Image \n[Read more about the HTTP request node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\n\nFor this demonstration, we'll grab an image off Pexels.com - a popular free stock photography site - by using the HTTP request node to download.\n\nIn your own workflows, this can be replaces by other triggers such as webhooks.",
        "height": 486.25,
        "width": 586.25,
        "color": 7
      },
      "id": "0941a4c3-8089-4ddc-9b9f-0fc497717d28",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        920,
        460
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 2. Using Vision Model to Generate Caption\n[Learn more about the Basic LLM Chain](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.chainllm)\n\nn8n's basic LLM node supports multimodal input by allowing you to specify either a binary or an image url to send to a compatible LLM. This makes it easy to start utilising this powerful feature for visual classification or OCR tasks which have previously depended on more dedicated OCR models.\n\nHere, we've simply passed our image binary as a \"user message\" option, asking the LLM to help us generate a caption title and text which is appropriate for the given subject. Once generated, we'll pass this text along with the image to combine them both.",
        "height": 783.75,
        "width": 888.75,
        "color": 7
      },
      "id": "9eaf6ddd-088b-439b-bee5-efca81009aa4",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1540,
        520
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## 3. Overlay Caption on Image \n[Read more about the Edit Image node](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.editimage)\n\nFinally, we’ll perform some basic calculations to place the generated caption onto the image. With n8n's user-friendly image editing features, this can be done entirely within the workflow!\n\nThe Code node tool is ideal for these types of calculations and is used here to position the caption at the bottom of the image. To create the overlay, the Edit Image node enables us to insert text onto the image, which we’ll use to add the generated caption.",
        "height": 635,
        "width": 753.75,
        "color": 7
      },
      "id": "e63ef3d5-373c-4e2f-81b3-3f51ad41c6a9",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2460,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "**FIG 1.** Example input image with AI generated caption\n![Example Output](https://res.cloudinary.com/daglih2g8/image/upload/f_auto,q_auto/v1/n8n-workflows/l5xbb4ze4wyxwwefqmnc#full-width)",
        "height": 411.25,
        "width": 563.75
      },
      "id": "b86f9221-96cd-41ef-9bb5-05c108537fe1",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3240,
        660
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "messages": {
          "messageValues": [
            {},
            {}
          ]
        }
      },
      "id": "12758400-98da-4a93-a1b6-3849ba108e97",
      "name": "Image Captioning Agent",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        1860,
        940
      ],
      "typeVersion": 1.4,
      "alwaysOutputData": false,
      "executeOnce": false,
      "retryOnFail": false,
      "notesInFlow": false
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "agnathan",
  "repo_path": "agnathan/n8n-workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-01T14:21:25.482Z",
      "updatedAt": "2024-12-01T14:21:25.482Z",
      "id": "SIJWhQ43whBotfGd",
      "name": "Community Examples"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-11T01:37:38.000Z",
  "versionId": "c7eb7f7a-2c2c-4f0f-a0ed-a5e4f0b760fb"
}