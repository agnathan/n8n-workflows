{
  "active": false,
  "connections": {
    "Switch": {
      "main": [
        [
          {
            "node": "Search Console - Get Custom Insights",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "## Search Console - Get List of Properties",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set fields": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tool calling": {
      "main": [
        [
          {
            "node": "Set fields - Consruct API CALL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook - ChatInput": {
      "main": [
        [
          {
            "node": "Set fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Call Search Console Tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set fields - Consruct API CALL": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Console - Get Custom Insights": {
      "main": [
        [
          {
            "node": "Set fields - Create searchConsoleDataArray",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "## Search Console - Get List of Properties": {
      "main": [
        [
          {
            "node": "Set fields - Create searchConsoleDataArray 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set fields - Create searchConsoleDataArray": {
      "main": [
        [
          {
            "node": "Array aggregation - response to AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set fields - Create searchConsoleDataArray 2": {
      "main": [
        [
          {
            "node": "Array aggregation - response to AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-27T06:00:14.653Z",
  "id": "vtdPMuY8cj6CPap2",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "AI Agent to Chat with Your Search Console Data",
  "nodes": [
    {
      "parameters": {
        "tableName": "insights_chat_histories"
      },
      "id": "95b10c3e-6f43-424d-a70f-7ef527afefca",
      "name": "Postgres Chat Memory",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "position": [
        2554.456277993872,
        1140
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "model": "gpt-4o",
        "options": {
          "maxTokens": 16000
        }
      },
      "id": "afc1812f-0936-4b53-8a56-e8288cfbf8d5",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        2114.456277993872,
        1160
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9f47b322-e42f-42d7-93eb-a57d22adb849",
              "name": "chatInput",
              "type": "string",
              "value": "={{ $json.body?.chatInput || $json.chatInput  }}"
            },
            {
              "id": "73ec4dd0-e986-4f60-9dca-6aad2f86bdeb",
              "name": "sessionId",
              "type": "string",
              "value": "={{ $json.body?.sessionId || $json.sessionId }}"
            },
            {
              "id": "4b688c46-b60f-4f0a-83d8-e283f2d7055c",
              "name": "date_message",
              "type": "string",
              "value": "={{ $now.format('yyyy-MM-dd') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "63a938d1-6ed4-452f-9179-628696b86db2",
      "name": "Set fields",
      "type": "n8n-nodes-base.set",
      "position": [
        1698.456277993872,
        900
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Webhook - ChatInput\n\nThis webhook serves as the endpoint for receiving `ChatInput` data. Ensure that you include:\n- `chatInput` ‚Äì the content you wish to send (üòâ)\n- `sessionId` ‚Äì a unique identifier for the session\n\nIf you're using an interface such as **Open WebUI**, the `sessionId` will be generated automatically.",
        "height": 516.8973214285712,
        "width": 347.9910714285712,
        "color": 7
      },
      "id": "1dcc9ecd-3f3d-434c-a6f7-1db38083ed2a",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1165.7777065653006,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a6820b65-76cf-402b-a934-0f836dee6ba0/chat",
        "authentication": "basicAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "91599e9b-02da-43e9-b6d9-6cafc685f507",
      "name": "Webhook - ChatInput",
      "type": "n8n-nodes-base.webhook",
      "position": [
        1258.456277993872,
        900
      ],
      "webhookId": "a6820b65-76cf-402b-a934-0f836dee6ba0",
      "typeVersion": 2
    },
    {
      "parameters": {
        "content": "## Set fields\n\nThis node sets three fields:\n- `chatInput`: retrieved from the previous webhook node\n- `sessionId`: retrieved from the previous webhook node\n- `date_message`: formatted within this node. This will be used later to help the AI agent determine the date range for retrieving Search Console data.",
        "height": 516.8973214285712,
        "width": 347.9910714285712,
        "color": 7
      },
      "id": "042df85e-6861-4a72-bf47-5dea92c1a9dc",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1578.456277993872,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "02f18fc5-1a48-4d7b-8b16-4da32339f941",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "position": [
        3358.456277993872,
        900
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "content": "## AI Agent - Tools Agent\n\nThis AI Agent is configured with a system prompt that instructs it to:\n- On the first user message, **retrieve available Search Console properties** and offer the user the option to **fetch data from these properties**\n- Based on the user‚Äôs natural language input, **construct an API call** to the selected Search Console property and retrieve the requested data\n- Present the data in a **markdown-formatted table**\n\nThe AI Agent has a friendly tone and is designed to **confirm the user‚Äôs data requirements accurately** before executing any API requests.\n",
        "height": 516.8973214285712,
        "width": 1154.2857142857138,
        "color": 7
      },
      "id": "cd92f80e-b964-4ca5-8278-ccffd687ca2b",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1998.456277993872,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "name": "SearchConsoleRequestTool",
        "description": "Call this tool when you need to get the website_list or custom_insights",
        "workflowId": {
          "__rl": true,
          "mode": "list",
          "value": "PoiRk5w0xd1ysq4U",
          "cachedResultName": "My workflow 10"
        },
        "jsonSchemaExample": ""
      },
      "id": "dad65b23-aec6-4df0-b756-f142c725710d",
      "name": "Call Search Console Tool",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "position": [
        2954.456277993872,
        1140
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - OpenAI Chat Model\n\nThis sub-node utilizes the selected **OpenAI Chat Model**. You can replace it with any LLM that **supports tool calling**.\n\n### ‚ö†Ô∏è Choose Your Model\nIn this template, the **default model is `gpt-4o`**, a **costly option**. If you'd like a more **affordable alternative**, select `gpt4-o-mini`, though note that responses may occasionally be of slightly lower quality compared to `gpt-4o`.",
        "height": 468.13107142857154,
        "width": 328.9664285714292,
        "color": 6
      },
      "id": "768f762b-bd5e-424a-9b4b-964a34cc5058",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1992.456277993872,
        1140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - Postgres Chat Memory\n\nConnect your **Postgres credentials** and specify a **table name** to store the chat history. In this template, the default table name is `insights_chat_histories`, and the **context window length is set to 5**.\n\n**üëã Tip:** If you don‚Äôt have a Postgres database, you can quickly **set one up with [Supabase](https://supabase.com/)**.\n",
        "height": 468.13107142857154,
        "width": 328.9664285714292,
        "color": 6
      },
      "id": "adf93168-51d1-4366-b0d5-cae57060fdbf",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2414.456277993872,
        1140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "\n\n\n\n\n\n\n\n\n\n\n### AI Agent Sub-node - Call Search Console Tool\n\nThis **tool is used by the AI Agent** to:\n- Retrieve the **list of accessible properties in Search Console**\n- **Fetch Search Console data** based on the user‚Äôs natural language request\n\n",
        "height": 468.13107142857154,
        "width": 328.9664285714292,
        "color": 6
      },
      "id": "9bf69fda-6ff7-4500-9739-06c0b5734690",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2834.456277993872,
        1140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Respond to Webhook\n\nThis node is used to send a response back to the user.\n\n**üëã Tip:** `intermediateSteps` are configured, allowing you to use raw data fetched from Search Console to **create charts or other visualizations** if desired.\n",
        "height": 516.8973214285712,
        "width": 347.9910714285712,
        "color": 7
      },
      "id": "12fd9321-c9ec-4cfb-9a68-0ad07a1f3e67",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3238.456277993872,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Tool Call Trigger\n\nThis **node is triggered when the AI Agent needs to retrieve the `website_list`** (accessible Search Console properties) or **`custom_insights`** based on user data.\n",
        "height": 492.3973214285712,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "47104dc1-47b1-4545-b746-621691206e71",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1158.456277993872,
        1720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "6e9a6554-d56d-409e-83eb-ed7628c029ff",
      "name": "Tool calling",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        1258.456277993872,
        2000
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "a30fe6a6-7d0a-4f14-8492-ae021ddc8ec6",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "={{ $json.request_type }}",
                    "rightValue": "custom_insights"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "custom_insights"
            },
            {
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "1b7d6039-6474-4a73-b157-584743a9d7f0",
                    "operator": {
                      "type": "string",
                      "operation": "contains"
                    },
                    "leftValue": "={{$json.request_type}}",
                    "rightValue": "website_list"
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "website_list"
            }
          ]
        },
        "options": {}
      },
      "id": "b22205c2-1918-4c77-a9a5-78781f818bed",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "position": [
        2058.456277993872,
        2000
      ],
      "typeVersion": 3.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "06373437-8288-4171-9f98-e8a417220dd4",
              "name": "request_type",
              "type": "string",
              "value": "={{ $json.query.parseJson().request_type }}"
            },
            {
              "id": "da45c0c5-05f6-4107-81aa-8c08c972d9bf",
              "name": "start_date",
              "type": "string",
              "value": "={{ $json.query.parseJson().startDate }}"
            },
            {
              "id": "59d55034-c612-43d7-9700-4cacdb630ec2",
              "name": "end_date",
              "type": "string",
              "value": "={{ $json.query.parseJson().endDate }}"
            },
            {
              "id": "4c2478c0-7f96-4d3d-a632-089307dc989e",
              "name": "dimensions",
              "type": "string",
              "value": "={{ $json.query.parseJson().dimensions }}"
            },
            {
              "id": "eceefbf9-44e5-4617-96ea-58aca2a29618",
              "name": "rowLimit",
              "type": "number",
              "value": "={{ $json.query.parseJson().rowLimit }}"
            },
            {
              "id": "4e18386e-8548-4385-b620-43efbb11cd63",
              "name": "startRow",
              "type": "number",
              "value": "={{ $json.query.parseJson().startRow}}"
            },
            {
              "id": "a9323a7b-08b4-4015-b3d7-632bcdf56f4e",
              "name": "property",
              "type": "string",
              "value": "={{ encodeURIComponent($json.query.parseJson().property) }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5242c670-2957-4fda-af70-e3358ce781e8",
      "name": "Set fields - Consruct API CALL",
      "type": "n8n-nodes-base.set",
      "position": [
        1678.456277993872,
        2000
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Set Fields - Construct API Call\n\nThis node configures fields based on the JSON sent by the AI agent:\n- The `request_type` field determines the route: `website_list` (to retrieve the list of websites) or `custom_insights` (to get insights from Search Console)\n- Additional fields are set to construct the API call, following the **[Search Console API Documentation](https://developers.google.com/webmaster-tools/v1/searchanalytics/query?hl=en)**\n",
        "height": 492.3973214285712,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "9b800991-0340-4618-a6b4-f1db918cb722",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1578.456277993872,
        1720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cffd36f-72bd-4535-8427-a88028ea0c4c",
              "name": "searchConsoleData",
              "type": "array",
              "value": "={{ $json.rows }}"
            }
          ]
        },
        "options": {}
      },
      "id": "749aed47-214d-4c3f-b7ab-e0a7968e91e4",
      "name": "Set fields - Create searchConsoleDataArray",
      "type": "n8n-nodes-base.set",
      "position": [
        2938.456277993872,
        1900
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2cffd36f-72bd-4535-8427-a88028ea0c4c",
              "name": "searchConsoleData",
              "type": "array",
              "value": "={{ $json.siteEntry }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ee03e233-986d-4f19-9f01-78429f220bbf",
      "name": "Set fields - Create searchConsoleDataArray 2",
      "type": "n8n-nodes-base.set",
      "position": [
        2938.456277993872,
        2260
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://www.googleapis.com/webmasters/v3/sites/{{ $json.property }}/searchAnalytics/query",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {}
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"startDate\": \"{{ $json.start_date }}\",\n  \"endDate\": \"{{ $json.end_date }}\",\n  \"dimensions\": {{ $json.dimensions }},\n  \"rowLimit\": {{ $json.rowLimit }},\n  \"startRow\": 0,\n  \"dataState\":\"all\"\n}",
        "options": {}
      },
      "id": "2e6f3932-5304-4222-ad6b-b019dc95ee35",
      "name": "Search Console - Get Custom Insights",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2378.456277993872,
        1900
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## Search Console - Get Custom Insights\n\nThis node **performs the API call to retrieve data from Search Console**.\n",
        "height": 364.3185243941325,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "9ca56d48-0f50-43ed-9fff-1d6ccb0eed58",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2278.456277993872,
        1720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Search Console - Get List of Properties\n\nThis node **performs the API call to retrieve the list of accessible properties from Search Console**.\n",
        "height": 334.24982142857124,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "807bf0b3-c8a5-46c8-9ed0-59ab3fb57d04",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2278.456277993872,
        2100
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "=https://www.googleapis.com/webmasters/v3/sites",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "id": "af5f455e-5141-4c0c-853f-ca66e1618471",
      "name": "## Search Console - Get List of Properties",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        2378.456277993872,
        2260
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "## Set Fields - Create `searchConsoleDataArray`\n\nThese nodes **create an array based on the response from the Search Console API**.\n",
        "height": 725.1298214285712,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "2a652af3-de94-42b0-b877-d377506b7e3d",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2798.456277993872,
        1720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Array Aggregation - Response to AI Agent\n\nThese nodes **aggregate the array from the previous** step and send it back to the AI Agent through the field named output as `response`.\n",
        "height": 722.6464176100125,
        "width": 370.3910714285712,
        "color": 7
      },
      "id": "5c2a5e2c-4a6f-416c-9517-76bf7b0511e2",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        3278.456277993872,
        1720
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "options": {}
      },
      "id": "f83ad5ff-b422-48b8-b0c9-1669a8dc6883",
      "name": "Array aggregation - response to AI Agent",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3398.456277993872,
        1900
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "response",
        "options": {}
      },
      "id": "12dddc14-9194-4e30-8a33-d3ff460e0f04",
      "name": "Array aggregation - response to AI Agent1",
      "type": "n8n-nodes-base.aggregate",
      "position": [
        3418.456277993872,
        2260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# AI Agent to Chat with Your Search Console Data\n\nThis **AI Agent enables you to interact with your Search Console data** through a **chat interface**. Each node is **documented within the template**, providing sufficient information for setup and usage. You will also need to **configure Search Console OAuth credentials**.\n\nFollow this **[n8n documentation](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-generic/#configure-your-oauth-consent-screen)** to set up the OAuth credentials.\n\n## Important Notes\n\n### Correctly Configure Scopes for Search Console API Calls\n- It‚Äôs essential to **configure the scopes correctly** in your Google Search Console API OAuth2 credentials. Incorrect **configuration can cause issues with the refresh token**, requiring frequent reconnections. Below is the configuration I use to **avoid constant re-authentication**:\n![Search Console API oAuth2 config 1](https://i.imgur.com/vVLM7gG.png)\n![Search Console API oAuth2 config 2](https://i.imgur.com/naT1NaX.png)\n\nOf course, you'll need to add your **client_id** and **client_secret** from the **Google Cloud Platform app** you created to access your Search Console data.\n\n### Configure Authentication for the Webhook\n\nSince the **webhook will be publicly accessible**, don‚Äôt forget to **set up authentication**. I‚Äôve used **Basic Auth**, but feel free to **choose the method that best meets your security requirements**.\n\n## ü§©üíñ Example of awesome things you can do with this AI Agent\n![Example of chat with this AI Agent](https://i.imgur.com/jbfsYvT.png)\n\n\n",
        "height": 1615.4504601771982,
        "width": 735.5589746610085
      },
      "id": "3128a4b2-6030-40a6-bee5-c58a104a6a46",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        360,
        600
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=user_message :  {{ $json.chatInput }}\ndate_message : {{ $json.date_message }}",
        "options": {
          "systemMessage": "=Assist users by asking natural, conversational questions to understand their data needs and building a custom JSON API request to retrieve Search Console data. Handle assumptions internally, confirming them with the user in a friendly way. Avoid technical jargon and never imply that the user is directly building an API request.\n\nPre-Step: Retrieve the Website List\nImportant: Initial Action: Before sending your first message to the user, retrieve the list of connected Search Console properties.\n\nTool Call for Website List:\n\nTool name: SearchConsoleRequestTool\nRequest:\n{\n  \"request_type\": \"website_list\" // Always include `request_type` in the API call.\n}\nUsage: Use this list to personalize your response in the initial interaction.\nStep-by-Step Guide\nStep 1: Initial Interaction and Introduction\nGreeting:\n\n\"Hi there! I‚Äôm here to help you gain valuable insights from your Search Console data. Whether you're interested in a specific time frame, performance breakdown by pages, queries, or other dimensions, I've got you covered.\n\nI can help you retrieve data for these websites:\n\nhttps://example1.com\nhttps://example2.com\nhttps://example3.com\nWhich of these properties would you like to analyze?\"\nStep 2: Handling User Response for Property Selection\nAction: When the user selects a property, use the property URL exactly as listed (e.g., \"https://example.com\") when constructing the API call.\n\nStep 3: Understanding the User's Needs\nAcknowledgment and Setting Defaults:\n\nIf the user expresses a general need (e.g., \"I want the last 3 months of page performance\"), acknowledge their request and set reasonable defaults.\n\nExample Response:\n\n\"Great! I'll gather the top 300 queries from the last 3 months for https://example.com. If you'd like more details or adjustments, just let me know.\"\n\nFollow-up Questions:\n\nConfirming Dimensions: If the user doesn‚Äôt specify dimensions, ask:\n\n\"For this analysis, I‚Äôll look at page performance. Does that sound good, or would you like to include other details like queries, devices, or other dimensions?\"\n\nNumber of Results: If the user hasn‚Äôt specified the number of results, confirm:\n\n\"I can show you the top 100 results. Let me know if you'd like more or fewer!\"\n\nStep 4: Gathering Specific Inputs (If Necessary)\nAction: If the user provides specific needs, capture and confirm them naturally.\n\nExample Response:\n\n\"Perfect, I‚Äôll pull the data for [specified date range], focusing on [specified dimensions]. Anything else you‚Äôd like me to include?\"\n\nImplicit Defaults:\n\nDate Range: Assume \"last 3 months\" if not specified.\nRow Limit: Default to 100, adjustable based on user input.\nStep 5: Confirming Input with the User\nAction: Summarize the request to ensure accuracy.\n\nExample Response:\n\n\"Here‚Äôs what I‚Äôm preparing: data for https://example.com, covering the last 3 months, focusing on the top 100 queries. Let me know if you‚Äôd like to adjust anything!\"\n\nStep 6: Constructing the JSON for Custom Insights\nAction: Build the API call based on the conversation.\n\n{\n  \"property\": \"<USER_PROVIDED_PROPERTY_URL>\", // Use the exact property URL.\n  \"request_type\": \"custom_insights\",\n  \"startDate\": \"<ASSUMED_OR_USER_SPECIFIED_START_DATE>\",\n  \"endDate\": \"<ASSUMED_OR_USER_SPECIFIED_END_DATE>\",\n  \"dimensions\": [\"<IMPLIED_OR_USER_SPECIFIED_DIMENSIONS>\"], // Array of one or more: \"page\", \"query\", \"searchAppearance\", \"device\", \"country\"\n  \"rowLimit\": 300 // Default or user-specified limit.\n}\nStep 7: Presenting the Data\nWhen Retrieving Custom Insights:\n\nImportant: Display all retrieved data in an easy-to-read markdown table format.\nStep 8: Error Handling\nAction: Provide clear, user-friendly error messages when necessary.\n\nExample Response:\n\n\"Hmm, there seems to be an issue retrieving the data. Let‚Äôs review what we have or try a different approach.\"\n\nAdditional Notes\nProactive Assistance: Offer suggestions based on user interactions, such as adding dimensions or refining details.\nTone: Maintain a friendly and helpful demeanor throughout the conversation.",
          "returnIntermediateSteps": true
        }
      },
      "id": "d2146520-912a-405c-91ae-9408c301b514",
      "name": "AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        2434.456277993872,
        900
      ],
      "typeVersion": 1.6
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "agnathan",
  "repo_path": "agnathan/n8n-workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-12-01T14:21:25.482Z",
      "updatedAt": "2024-12-01T14:21:25.482Z",
      "id": "SIJWhQ43whBotfGd",
      "name": "Community Examples"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-01T14:22:36.000Z",
  "versionId": "50a32247-edd3-4d14-8bda-2bb72297edd3"
}